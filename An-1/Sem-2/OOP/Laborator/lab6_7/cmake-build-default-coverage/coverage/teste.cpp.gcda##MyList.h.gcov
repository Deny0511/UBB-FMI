        -:    0:Source:/mnt/c/Users/urdad/lab6_7/MyList.h
        -:    0:Graph:/mnt/c/Users/urdad/lab6_7/cmake-build-default-coverage/CMakeFiles/lab6_7.dir/teste.cpp.gcno
        -:    0:Data:/mnt/c/Users/urdad/lab6_7/cmake-build-default-coverage/CMakeFiles/lab6_7.dir/teste.cpp.gcda
        -:    0:Runs:1
        -:    1:
        -:    2:#pragma once
        -:    3:#include <stdexcept>
        -:    4:
        -:    5:template<typename T>
        -:    6:class MyList {
        -:    7:private:
        -:    8:    T* elems;
        -:    9:    int cap;
        -:   10:    int len;
        -:   11:
function _ZN6MyListIiE15ensure_capacityEv called 28 returned 100% blocks executed 92%
       28:   12:    void ensure_capacity() {
       28:   13:        if (len < cap) return;
       28:   13-block  0
branch  0 taken 27 (fallthrough)
branch  1 taken 1
       27:   13-block  1
        1:   14:        cap *= 2;
       1*:   15:        T* newElems = new T[cap];
        1:   15-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   15-block  1
    %%%%%:   15-block  2
call    2 never executed
        1:   15-block  3
call    3 returned 1
        3:   16:        for (int i = 0; i < len; ++i)
        3:   16-block  0
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        2:   17:            newElems[i] = elems[i];
        2:   17-block  0
        1:   18:        delete[] elems;
        1:   18-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   18-block  1
call    2 returned 1
        1:   19:        elems = newElems;
        1:   19-block  0
        -:   20:    }
        -:   21:
        -:   22:public:
function _ZN6MyListIiEC2Ei called 12 returned 100% blocks executed 80%
       12:   23:    MyList(int capacity = 10) : cap(capacity), len(0) {
      12*:   24:        elems = new T[cap];
       12:   24-block  0
branch  0 taken 12 (fallthrough)
branch  1 taken 0
       12:   24-block  1
    %%%%%:   24-block  2
call    2 never executed
       12:   24-block  3
call    3 returned 12
       12:   25:    }
        -:   26:
function _ZN6MyListIiED2Ev called 15 returned 100% blocks executed 100%
       15:   27:    ~MyList() {
       15:   28:        delete[] elems;
       15:   28-block  0
branch  0 taken 13 (fallthrough)
branch  1 taken 2
       13:   28-block  1
call    2 returned 13
       15:   29:    }
        -:   30:
function _ZN6MyListIiEC2ERKS0_ called 2 returned 100% blocks executed 88%
        2:   31:    MyList(const MyList& other) : cap(other.cap), len(other.len) {
       2*:   32:        elems = new T[cap];
        2:   32-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:   32-block  1
    %%%%%:   32-block  2
call    2 never executed
        2:   32-block  3
call    3 returned 2
        8:   33:        for (int i = 0; i < len; ++i) {
        8:   33-block  0
branch  0 taken 6
branch  1 taken 2 (fallthrough)
        6:   34:            elems[i] = other.elems[i];  // Copy elements
        6:   34-block  0
        -:   35:        }
        2:   36:    }
function _ZN6MyListIiEaSERKS0_ called 1 returned 100% blocks executed 92%
        1:   37:    MyList& operator=(const MyList& other) {
        1:   38:        if (this != &other) {
        1:   38-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   39:            delete[] elems;
        1:   39-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   39-block  1
call    2 returned 1
        1:   40:            cap = other.cap;
        1:   41:            len = other.len;
       1*:   42:            elems = new T[cap];
        1:   42-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   42-block  1
    %%%%%:   42-block  2
call    2 never executed
        1:   42-block  3
call    3 returned 1
        4:   43:            for (int i = 0; i < len; ++i) {
        4:   43-block  0
branch  0 taken 3
branch  1 taken 1 (fallthrough)
        3:   44:                elems[i] = other.elems[i];
        3:   44-block  0
        -:   45:            }
        -:   46:        }
        1:   47:        return *this;
        1:   47-block  0
        -:   48:    }
        -:   49:
function _ZN6MyListIiE3addERKi called 28 returned 100% blocks executed 100%
       28:   50:    void add(const T& elem) {
       28:   51:        ensure_capacity();
       28:   51-block  0
call    0 returned 28
       28:   52:        elems[len++] = elem;
       28:   53:    }
        -:   54:
        -:   55:
function _ZN6MyListIiEC2EOS0_ called 1 returned 100% blocks executed 100%
        1:   56:    MyList(MyList&& other) noexcept
        1:   57:        : elems(other.elems), cap(other.cap), len(other.len) {
        1:   58:        other.elems = nullptr;
        1:   59:        other.cap = 0;
        1:   60:        other.len = 0;
        1:   61:    }
        -:   62:
function _ZN6MyListIiEaSEOS0_ called 1 returned 100% blocks executed 100%
        1:   63:    MyList& operator=(MyList&& other) noexcept {
        1:   64:        if (this != &other) {
        1:   64-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   65:            delete[] elems;
        1:   65-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   65-block  1
call    2 returned 1
        1:   66:            elems = other.elems;
        1:   67:            cap = other.cap;
        1:   68:            len = other.len;
        -:   69:
        1:   70:            other.elems = nullptr;
        1:   71:            other.cap = 0;
        1:   72:            other.len = 0;
        1:   72-block  0
        -:   73:        }
        1:   74:        return *this;
        1:   74-block  0
        -:   75:    }
        -:   76:
        -:   77:
        -:   78:
function _ZN6MyListIiE6removeEi called 2 returned 50% blocks executed 91%
        2:   79:    void remove(int index) {
        2:   80:        if (index < 0 || index >= len)
        2:   80-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:   80-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 1
        1:   81:            throw std::out_of_range("Index invalid");
        1:   81-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   81-block  1
call    4 returned 0
    $$$$$:   81-block  2
call    5 never executed
        2:   82:        for (int i = index; i < len - 1; ++i)
        1:   82-block  0
        2:   82-block  1
branch  0 taken 1
branch  1 taken 1 (fallthrough)
        1:   83:            elems[i] = elems[i + 1];
        1:   83-block  0
        1:   84:        len--;
        1:   85:    }
        1:   85-block  0
        -:   86:
function _ZN6MyListIiE6updateEiRKi called 3 returned 67% blocks executed 88%
        3:   87:    void update(int index, const T& elem) {
        3:   88:        if (index < 0 || index >= len)
        3:   88-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3:   88-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 2
        1:   89:            throw std::out_of_range("Index invalid");
        1:   89-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   89-block  1
call    4 returned 0
    $$$$$:   89-block  2
call    5 never executed
        2:   90:        elems[index] = elem;
        2:   91:    }
        2:   91-block  0
        -:   92:
function _ZN6MyListIiEixEi called 29 returned 97% blocks executed 89%
       29:   93:    T& operator[](int index) {
       29:   94:        if (index < 0 || index >= len)
       29:   94-block  0
branch  0 taken 29 (fallthrough)
branch  1 taken 0
       29:   94-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 28
        1:   95:            throw std::out_of_range("Index invalid");
        1:   95-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   95-block  1
call    4 returned 0
    $$$$$:   95-block  2
call    5 never executed
       28:   96:        return elems[index];
       28:   96-block  0
       28:   96-block  1
        -:   97:    }
        -:   98:
function _ZNK6MyListIiEixEi called 2 returned 50% blocks executed 89%
        2:   99:    const T& operator[](int index) const {
        2:  100:        if (index < 0 || index >= len)
        2:  100-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  100-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 1
        1:  101:            throw std::out_of_range("Index invalid");
        1:  101-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  101-block  1
call    4 returned 0
    $$$$$:  101-block  2
call    5 never executed
        1:  102:        return elems[index];
        1:  102-block  0
        1:  102-block  1
        -:  103:    }
        -:  104:
function _ZNK6MyListIiE4sizeEv called 14 returned 100% blocks executed 100%
       14:  105:    int size() const {
       14:  106:        return len;
       14:  106-block  0
        -:  107:    }
        -:  108:
        -:  109:    void clear() {
        -:  110:        len = 0;
        -:  111:    }
        -:  112:    bool empty() const {
        -:  113:        return len == 0;
        -:  114:    }
        -:  115:    void setAll(const T& newValue) {
        -:  116:        std::fill(elems.begin(), elems.end(), newValue);
        -:  117:    }
function _ZN6MyListIiE5beginEv called 1 returned 100% blocks executed 100%
        1:  118:    T* begin() {
        1:  119:        return elems;
        1:  119-block  0
        -:  120:    }
        -:  121:
function _ZN6MyListIiE3endEv called 4 returned 100% blocks executed 100%
        4:  122:    T* end() {
        4:  123:        return elems + len;
        4:  123-block  0
        -:  124:    }
        -:  125:};
